Your supermarket company is in the process of improving their Docker-based applications. They have built a set of three RESTful data services that communicate with each other as part of a larger infrastructure. You have been given the task of designing a Docker application stack so that these three services can be easily managed and scaled as a unit. A Docker Swarm cluster has already been set up by you to use in previous execises.

Here is some background information on the three services:

1. Fruit Service
	a. Provides a list of fruits sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/fruit-service:1.0.1 to run this service.
	c. Listens on port 80.
	d. The service should be named fruit inside the stack.

2. Vegetable Service
	a. Provides a list of vegetables sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/vegetable-service:1.0.0 to run this service.
	c. Listens on port 80.
	d. The service should be named vegetables inside the stack.

3. All Products Service
	a. Queries the other two services, combining their data into a single list of all produce.
	b. You can use the Docker image tag linuxacademycontent/all-products:1.0.0 to run this service.
	c. Listens on port 80.
	d. Use the environment variables FRUIT_HOST and FRUIT_PORT to set the host and port which will be used to query the fruit service.
	e. Use the environment variables VEGETABLE_HOST and VEGETABLE_PORT to set the host and port which will be used to query the vegetable service.


=============================================================================================================================================================

SOLUTION ====
Deploy a Docker application stack that meets the following specifications:
1. The stack is called produce.
2. The stack runs the Fruit, Vegetable, and All Products services.


# Create swarm cluster - manager & worker nodes

	$ docker swarm init --advertise-addr 172.17.0.56

 	$ docker swarm join --token SWMTKN-1-5lyza3iodu3wuc704myt08v9pktxg68s4td743mme0kxvx3rdz-87il11w28g0j1qr4zx05giha9 172.17.0.98:2377


# create yaml file with all the services invlving complex container to be maintanied via stack
vi produce.yml 

version: '3'
services: 
 fruit: 
  image: linuxacademycontent/fruit-service:1.0.1
  ports:
   - 8081:80
  environment:
   - FRUIT_HOST=http://172.17.0.72
   - FRUIT_PORT=8081
   
  
 vegetable:
  image: linuxacademycontent/vegetable-service:1.0.0
  ports:
   - 8082:80
  environment:
   - VEGETABLE_HOST=http://172.17.0.72
   - VEGETABLE_PORT=8082
 
 allproduct:
  image: linuxacademycontent/all-products:1.0.0:curl
   command: /bin/sh -c "while true; do echo $$MESSAGE; curl vegetables:80; sleep 10; done"
   ports:
   - 8080:80
  environment:
   - VEGETABLE_HOST=http://172.17.0.72
   - VEGETABLE_PORT=8080 

# Deploy stack 
$ docker stack deploy -c produce.yml  produce


3. The All Products service is able to query the Fruit and Vegetable services.
$ curl http://172.17.0.72:8081 
$ curl http://172.17.0.72:8082

4. The All Products service is published on port 8080.
#Once you have deployed the stack, you can verify whether it is working by querying the All Products service:
$ curl 172.0.17.72:8080
#if the stack is set up correctly, you should get a combined list of fruits and vegetables.

Step 2
#Once you have deployed the stack and verified that it is working, modify the stack by scaling both the Fruit and Vegetable services up to 3 replicas.
$ docker service update --replicas 3 produce_vegetable
$ docker service update --replicas 3 produce_fruit
or
$ docker service scale produce_fruit=4

Good luck!