	Your company has recently decided to use Docker to run containers in production. They have built some Docker images to run their own proprietary software and need a place to store and manage these images. You have been asked to build a secure, private Docker registry for use by the company. In order to verify that everything works, you have also been asked to configure a Docker workstation server to push to and pull from the registry.

To complete this lab, ensure that the following requirements are met for the registry:

1. A private Docker registry is running on the Docker registry server using version 2 of the registry image.
2. The container name for the registry should be registry.
3. The registry should always automatically restart if it stops or the Docker daemon or server restarts.
4. The registry should require authentication. Set up an initial account with the username docker and the password d0ck3rrU73z.
5. The registry should use TLS with a self-signed certificate.
6. The registry should listen on port 443.


Set up the Docker workstation server to meet the following requirements:

1. Docker is logged in to the private registry.
2. Docker is configured to accept the self-signed cert. Do not turn off certificate verification using the insecure-registries setting.
3. To confirm that everything is working, push a test image called ip-10-0-1-101:443/test-image:1 to the private registry. You can pull any image from Docker hub and tag it with ip-10-0-1-101:443/test-image:1 as a test.
4. Delete the test image locally and pull it from the registry.

[NOTE: Write the series of commands to achieve above in this file below the question scenario with documentation]

Good luck!

=============================================================================================================================================================
# create directory called registry in root
	$ mkdir ~/registry

# go inside registry of root 
	$ cd ~/registry

#Create directory called auth
	 $ mkdir auth


#Secure the registry by generating an htpasswd file to be used for authentication:
$ docker run --entrypoint htpasswd registry:2 -Bbn testuser password > auth/htpasswd



#Generate a self-signed certificate. When generating the cert, leave the prompts blank except for Common Name. For Common Name, put the public hostname of the registry server. The public hostname is in the playground interface:
#Create directory called certs
$ mkdir certs

$ openssl req \
  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \
  -x509 -days 365 -out certs/domain.crt

# docker login 
$ docker login 172.17.0.155


#However, this method of accessing the registry is very insecure. It turns off certificate verification entirely, exposing us to man-in-the-middle attacks. So, let's do this the right way.

First, log out of the private registry:
$ docker logout 172.17.0.155

Next, remove the insecure-registries key and value from /etc/docker/daemon.json.


Restart Docker:
$ sudo systemctl restart docker


#Run the registry with authentication and TLS enabled:

docker run -d -p 443:443 --restart=always --name registry \
  -v /root/registry/certs:/certs \
  -v /root/registry/auth:/auth \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -e REGISTRY_AUTH=htpasswd \
  -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  registry:2
#o/p for above  cf365f13e463244c742cc61d5d5cd7c51ff5acd301c4542190a5100748885f0a

#Login to registry
$ docker login -udocker -pd0ck3rrU73z 172.17.0.155:443

#Pull ubuntu image
$ docker pull tomcat:8.0

#Tag image
$ docker tag tomcat:8.0 172.17.0.155:443/test-image:1

#Push image to registry
$ docker push 172.17.0.155:443/test-image:1

#Remove image from local system
$ docker rmi test-image:1

# untag the image
$ docker rmi 172.17.0.155:443/test-image:1

#Now pull the image from registry
$ docker pull 172.17.0.155:443/test-image:1

docker logout

To retrieve list of all repositories in your private docker registry:
curl -u docker:d0ck3rrU73z -v -X GET https://172.17.0.155:443/v2/_catalog

Referances ---??
https://medium.com/@ifeanyiigili/how-to-setup-a-private-docker-registry-with-a-self-sign-certificate-43a7407a1613
